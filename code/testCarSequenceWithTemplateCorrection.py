import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation
import matplotlib.patches as patches
from LucasKanade import LucasKanade


# write your script here, we recommend the above libraries for making your animation
carseq = np.load("../data/carseq.npy")

'''
    This is the pre-stored rect which is generated by traditional LK method without template correction
'''
rect_baseline = np.load("../data/carseqrects.npy")


print(carseq.shape)

rect_0 = [59,116,145,151]
rect = [59,116,145,151]

rect_tostore = []
rect_tostore.append(rect)
threshold = 10
p = np.zeros(2)
for i in range(carseq.shape[2]-1):
    print(i)
    p_tmp = LucasKanade(carseq[:, :, i], carseq[:, :, i+1], rect, np.zeros(2))
    p_tmp_1 = LucasKanade(carseq[:, :, 0], carseq[:, :, i+1], rect_0, p_tmp+p)

    if np.linalg.norm(p_tmp_1-p_tmp-p)<threshold:
        p = p_tmp_1
    else:
        p = p + p_tmp
    rect = [rect_0[0]+p[0], rect_0[1]+p[1], rect_0[2]+p[0], rect_0[3]+p[1]]
    rect_tostore.append(rect)


    if i in [0,99,199,299,399]:
        im = carseq[:, :, i + 1]
        fig, ax = plt.subplots(1)
        plt.imshow(im, cmap='gray')
        rectangle_1 = patches.Rectangle((rect_baseline[i + 1, 0], rect_baseline[i + 1, 1]),
                                        rect_baseline[i + 1, 2] - rect_baseline[i + 1, 0] + 1,
                                        rect_baseline[i + 1, 3] - rect_baseline[i + 1, 1] + 1, linewidth=1,
                                        edgecolor='g', facecolor='none')
        ax.add_patch(rectangle_1)
        rectangle = patches.Rectangle((rect[0], rect[1]), rect[2] - rect[0] + 1, rect[3] - rect[1] + 1, linewidth=1,
                                      edgecolor='y', facecolor='none')
        ax.add_patch(rectangle)
        plt.show()
        plt.close()

rect_tostore = np.array(rect_tostore)
np.save("../data/carseqrects-wcrt.npy", rect_tostore)
print("done")
